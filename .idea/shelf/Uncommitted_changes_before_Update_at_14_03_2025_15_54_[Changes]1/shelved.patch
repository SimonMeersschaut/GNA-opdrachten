Index: 2_insertion_sort/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\n\r\ndef insertionSort(arr, _):\r\n    telling = 0\r\n    n = len(arr)  # Get the length of the array\r\n     \r\n    if n <= 1:\r\n        return  # If the array has 0 or 1 element, it is already sorted, so return\r\n\r\n    for i in range(1, n):  # Iterate over the array starting from the second element\r\n        key = arr[i]  # Store the current element as the key to be inserted in the right position\r\n        j = i-1\r\n        while j >= 0 and key < arr[j]:  # Move elements greater than key one position ahead\r\n            telling += 1\r\n            arr[j+1] = arr[j]  # Shift elements to the right\r\n            j -= 1\r\n        arr[j+1] = key  # Insert the key in the correct position\r\n    return telling\r\n\r\ncounts = []\r\nstep_size = 5\r\nstep_count = 100\r\nfor n in range(0, step_count*step_size, step_size):\r\n    array = [i for i in range(n)]\r\n    random.shuffle(array)\r\n    counts.append(insertionSort(array, n))\r\n\r\n# create plot\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\n# plot experimental data\r\nplt.scatter(range(0, step_count*step_size, step_size), counts, label='Experimentele data', color='blue')\r\n# plot best case\r\nplt.plot(range(0, step_count*step_size, step_size), [(x-1) for x in range(0, step_count*step_size, step_size)], color='green', label='Best case: (n-1)')\r\n# plot average case\r\nplt.plot(range(0, step_count*step_size, step_size), [x*(x-1)/4 for x in range(0, step_count*step_size, step_size)], color='blue', label='Average case: n(n-1)/2')\r\n# plot worst case\r\nplt.plot(range(0, step_count*step_size, step_size), [(x**2)/2 for x in range(0, step_count*step_size, step_size)], color='red', label='Worst case: n^2/2')\r\n\r\nplt.xlabel(\"Lengte lijst\")\r\nplt.ylabel(\"Aantal vergelijkingen\")\r\nplt.legend()\r\nplt.title(\"Willekeurige array\")\r\nplt.loglog()\r\n# ax = plt.gca()\r\n# ax.set_aspect('equal', adjustable='box')\r\nplt.show()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/2_insertion_sort/main.py b/2_insertion_sort/main.py
--- a/2_insertion_sort/main.py	(revision 1001505fb4a502d81ed2114f670bf2def6107db9)
+++ b/2_insertion_sort/main.py	(date 1741963951971)
@@ -1,30 +1,48 @@
 import random
+import time
+
+def is_sorted(lst, key=lambda x: x):
+    for i, el in enumerate(lst[1:]):
+        if key(el) < key(lst[i]): # i is the index of the previous element
+            return False
+    return True
+
 
 def insertionSort(arr, _):
     telling = 0
     n = len(arr)  # Get the length of the array
      
     if n <= 1:
-        return  # If the array has 0 or 1 element, it is already sorted, so return
+        return 0  # If the array has 0 or 1 element, it is already sorted, so return
 
     for i in range(1, n):  # Iterate over the array starting from the second element
         key = arr[i]  # Store the current element as the key to be inserted in the right position
         j = i-1
-        while j >= 0 and key < arr[j]:  # Move elements greater than key one position ahead
+        while j >= 0:  # Move elements greater than key one position ahead
             telling += 1
-            arr[j+1] = arr[j]  # Shift elements to the right
-            j -= 1
+            if key < arr[j]:
+                arr[j+1] = arr[j]  # Shift elements to the right
+                j -= 1
+            else:
+                break
         arr[j+1] = key  # Insert the key in the correct position
+    assert is_sorted(arr)
     return telling
 
+
+time_start = time.time()
+
+# counts = []
 counts = []
-step_size = 5
-step_count = 100
+step_size = 10
+step_count = 200
 for n in range(0, step_count*step_size, step_size):
-    array = [i for i in range(n)]
+    # array = [i for i in range(n)]
+    array = [random.random() for i in range(n)]
     random.shuffle(array)
     counts.append(insertionSort(array, n))
 
+
 # create plot
 
 import matplotlib.pyplot as plt
@@ -34,7 +52,9 @@
 # plot best case
 plt.plot(range(0, step_count*step_size, step_size), [(x-1) for x in range(0, step_count*step_size, step_size)], color='green', label='Best case: (n-1)')
 # plot average case
-plt.plot(range(0, step_count*step_size, step_size), [x*(x-1)/4 for x in range(0, step_count*step_size, step_size)], color='blue', label='Average case: n(n-1)/2')
+plt.plot(range(0, step_count*step_size, step_size), [x*(x-1)/4 for x in range(0, step_count*step_size, step_size)], color='blue', label='Average case: n(n-1)/4')
+#
+plt.plot(range(0, step_count*step_size, step_size), [x**2/4 for x in range(0, step_count*step_size, step_size)], color='yellow', label='Average case (approx.): n^2/4')
 # plot worst case
 plt.plot(range(0, step_count*step_size, step_size), [(x**2)/2 for x in range(0, step_count*step_size, step_size)], color='red', label='Worst case: n^2/2')
 
@@ -42,7 +62,9 @@
 plt.ylabel("Aantal vergelijkingen")
 plt.legend()
 plt.title("Willekeurige array")
-plt.loglog()
+# plt.loglog()
 # ax = plt.gca()
 # ax.set_aspect('equal', adjustable='box')
+
+print(f"Execution time: {time.time() - time_start}.")
 plt.show()
\ No newline at end of file
